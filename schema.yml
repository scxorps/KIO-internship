openapi: 3.0.3
info:
  title: Intern API
  version: 1.0.0
  description: API for the Intern project
paths:
  /api/collections/:
    get:
      operationId: collections_retrieve
      description: Retrieve only collections created by the logged-in user
      tags:
      - collections
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
    post:
      operationId: collections_create
      description: Create a collection and assign it to the authenticated user
      tags:
      - collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Collection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
  /api/collections/{slug}/:
    get:
      operationId: collections_retrieve_2
      description: Retrieve a specific collection that belongs to the authenticated
        user
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - collections
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
    put:
      operationId: collections_update
      description: Update a collection
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Collection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
    delete:
      operationId: collections_destroy
      description: Delete a collection
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - collections
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/media/:
    get:
      operationId: media_retrieve
      description: Retrieve product media. If pk is provided, return a specific media
        file.
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    post:
      operationId: media_create
      description: Upload a new media file for a product
      tags:
      - media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMedia'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
  /api/media/{id}/:
    get:
      operationId: media_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    put:
      operationId: media_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMedia'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMedia'
          description: ''
    delete:
      operationId: media_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/products/:
    get:
      operationId: products_retrieve
      tags:
      - products
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: products_create
      description: Create a new product with a unique name per user.
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{slug}/:
    get:
      operationId: products_retrieve_2
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: products_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/signup/:
    post:
      operationId: signup_create
      tags:
      - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/userdetails/:
    get:
      operationId: userdetails_retrieve
      tags:
      - userdetails
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: userdetails_update
      tags:
      - userdetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: userdetails_destroy
      tags:
      - userdetails
      security:
      - cookieAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Collection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
      - description
      - id
      - name
      - products
    Product:
      type: object
      properties:
        product_id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - name
      - product_id
      - user_id
    ProductMedia:
      type: object
      description: Serializer for handling Product Media uploads
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        image_url:
          type: string
          format: uri
      required:
      - id
      - image_url
      - product
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          maxLength: 128
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        email:
          type: string
          format: email
          maxLength: 255
        phone_number:
          type: string
          maxLength: 15
      required:
      - email
      - password
      - phone_number
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    oauth2:
      type: oauth2
      flows: {}
